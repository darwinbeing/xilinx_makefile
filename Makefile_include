#first idea: http://git.joshuawise.com/cgi-bin/gitweb.cgi?p=vterm.git;a=blob;f=Makefile;hb=HEAD

#place where environment variables can be found. doing like this, the "source" statement doesn't have to be global in .bashrc
XILINX=. /opt/xilinx/10.1/ISE/settings32.sh
WAVEFORMVIEWER=/opt/gtkwave/bin/gtkwave




#include this makefile in your project, and set all neccessary variables 

##
#
# Contrsucting of dependencies... trieing to find every needed file and prepare variable according to some obscure logic...
#
##
 
# Get every vhd-file in included librarys:
LIB_VHD=$(shell for lib in $(LIBS); do find $(LIBDIR) -name "*.vhd*" | grep -v .swp | grep -v .svn | grep -v tb_ | grep -v test_ | grep -v _test. ; done)

# Get all IP-Cores and coe-Files from included librarys:
LIB_XCO=$(shell for lib in $(LIBS); do find $(LIBDIR) -name "*.xco"; done)
LIB_COE=$(shell for lib in $(LIBS); do find $(LIBDIR) -name "*.coe"; done)

# We need backup names for our IP-Cores to prevent coregen from modifing them
LOCAL_XCO_BACKUP=$(shell for core in $(LOCAL_XCO); do echo `dirname $$core`/.backup_`basename $$core`;done)
LIB_XCO_BACKUP=$(shell for core in $(LIB_XCO); do echo `dirname $$core`/.backup_`basename $$core`;done)

# Build dependencys for all found IP-Cores
ALL_XCO_2_VHD=$(subst .xco,.vhd,$(LIB_XCO) $(LOCAL_XCO))

# construct a variable which contains all vhd(l)-files from the project, the IP-Cores and included libs (without testbenches)
ALL_VHD=$(LOCAL_VHD) $(LIB_VHD) $(ALL_XCO_2_VHD)

##
#
# Templates, which will be sed'd to be used in this project... could be stored centrally, later
#
##
IMPACT_FPGA?=$(INCLUDEDIR)template_impact_fpga.cmd
IMPACT_PROM?=$(INCLUDEDIR)template_impact_prom.cmd
ISIM_BATCH?=$(INCLUDEDIR)template_isim.tcl
XST_SCRIPT?=$(INCLUDEDIR)template_xst
BITGEN_OPTION_FILE?=$(INCLUDEDIR)template_bitgen.ut

#part specific data...
PART?=xc3s1000
PACKAGE?=ft256
SPEED?=-4

#verbosity
#INTSTYLE=-intstyle ise
INTSTYLE=-intstyle silent

##
#
# And here we go...
#
##
all: info

info:
	@echo 'Makefile: Known local vhd-Files:'
	@echo ''
	@echo $(shell for file in $(LOCAL_VHD); do echo $$file;done)
	@echo ''
	@echo 'Makefile: Known local xco-Files:'
	@echo ''
	@echo $(shell for file in $(LOCAL_XCO); do echo $$file;done)
	@echo ''
	@echo 'Makefile: Known library vhd-Files:'
	@echo ''
	@echo $(shell for file in $(LIB_VHD); do echo $$file;done)
	@echo ''
	@echo 'Makefile: Known library xco-Files:'
	@echo ''
	@echo $(shell for file in $(LIB_XCO); do echo $$file;done)
	@echo ''
	@echo 'Makefile: Known library xco-Backup Names:'
	@echo ''
	@echo $(shell for file in $(LOCAL_XCO_BACKUP) $(LIB_XCO_BACKUP); do echo $$file;done)
	@echo ''
	@echo 'Makefile: All known vhd-Files:'
	@echo ''
	@echo $(shell for file in $(ALL_VHD); do echo $$file;done)
	@echo ''

DoxyFile:
	$(DOXYGEN) -g $@
	sed -i $@ -e s|'PROJECT_NAME           ='|'PROJECT_NAME           = $(PROJECT_NAME)'|
	sed -i $@ -e s|'PROJECT_NUMBER         ='|'PROJECT_NUMBER         = $(PROJECT_ID)'|
	sed -i $@ -e s|'OUTPUT_DIRECTORY       ='|'OUTPUT_DIRECTORY       = doxygen'|
	sed -i $@ -e s|'INPUT                  ='|'INPUT                  = $(ALL_VHD)'|
	sed -i $@ -e s|'HAVE_DOT               = NO'|'HAVE_DOT               = YES'|
	sed -i $@ -e s|'OPTIMIZE_OUTPUT_VHDL   = NO'|'OPTIMIZE_OUTPUT_VHDL   = YES'|

doxy: DoxyFile $(VHDL_ALL)
	$(DOXYGEN) DoxyFile

###
#
# weak informational textfiles for isetools, batch scripts and configurtion files...
#
###

# this file triggers complete rebuilding of everything after IP-Core-generation, because its deleted after every build
%.prj: $(ALL_VHD)
	@echo 'Makefile: Creating $@'
	@rm -f $@
	@for file in $(ALL_VHD); do echo vhdl work '"'$$file'"' >> $@; done

%.lso:
	@echo 'Makefile: Creating $@'
	@echo work > $@

impact_%_fpga.cmd: $(IMPACT_FPGA) 
	@echo 'Makefile: Creating FPGA-batchfile $@ for impact'
	sed -e s/XXX/$*/ < $(IMPACT_FPGA) > $@

impact_%_prom.cmd: $(IMPACT_PROM) 
	@echo 'Makefile: Creating PROM-batchfile $@ for impact'
	sed -e s/XXX/$*/ < $(IMPACT_PROM) > $@

%.xst: $(XST_SCRIPT)
	@echo 'Makefile: Creating xst-Script for Project $*'
	sed -e s/xxxTARGETxxx/$*/ < $(XST_SCRIPT) > $@
	@echo 'Makefile: Inserting FPGA-specific knowlegde into xst-script'
	sed -i $@ -e s/xxxPARTxxx/$(PART)/
	sed -i $@ -e s/xxxPACKAGExxx/$(PACKAGE)/
	sed -i $@ -e s/xxxSPEEDxxx/$(SPEED)/

###
#
# automatically create codeblocks-file... not finished, script not error-free
#
###
%.cbp:
	~/masterarbeit.git/script/createCodeBlocksProject.sh $(LOCAL_VHD) $(LOCAL_XCO) $(LIB_VHD) $(LIB_XCO)


###
#
# generating usable vhd-files out of ip-cores (result to be stored in lib-dir, as in ISE)
#
###
%.vhd: %.xco
	@echo 'Makefile: Generating IP-Core for $*'
	@echo 'Makefile: Backupping xco-file since coregen will modify them. Others will be confused by this behaviour...'
	@echo 'Makefile: Preserving timestamps to make make happy'
	cp --preserve=timestamps $< $(dir $<).backup_$(notdir $<)
	@echo 'Makefile: Changing directory, so coregen will generate in library dir... no nice behaviour but default in ISE'
	$(XILINX); cd $(dir $<); coregen -b $(notdir $<)
	@echo 'Makefile: Restoring previously saved xco-file to revert coregen changes'
	mv $(dir $<).backup_$(notdir $<) $<

###
#
# complete buildprocess for *.bit-file
#
###
%.ngc: %.xst %.prj %.lso
	@echo 'Makefile: Creating $@'
	@mkdir -p xst/projnav.tmp
	$(XILINX); xst $(INTSTYLE) -ifn $*.xst -ofn $*.syr

# tell ngdbuild to  to look in every library sub-dir with "-sd" to find eventually build ip-cores residing there
# we have to build this ugly hack, because "-sd" can only take one argument -- luckily this option is provided at all
NGDBUILD_HACK=$(shell for lib in $(LIBS); do echo  -sd $(LIBDIR);done)
%.ngd: %.ngc $(UCF)
	@echo 'Makefile: Creating $@'
	echo $(NGDBUILD_SD_HACK)
	$(XILINX); ngdbuild $(INTSTYLE) -dd _ngo -uc $(UCF) -nt timestamp -p $(PART)-$(PACKAGE)$(SPEED) $(NGDBUILD_HACK) "$*.ngc" $*.ngd

%_map.ncd %.pcf: %.ngd
	@echo 'Makefile: Creating $@'
	$(XILINX); map $(INTSTYLE) -p $(PART)-$(PACKAGE)$(SPEED) -cm area -pr b -k 4 -c 100 -o $*_map.ncd $*.ngd $*.pcf

%.ncd: %_map.ncd %.pcf
	@echo 'Makefile: Creating $@'
	$(XILINX); par $(INTSTYLE) -w -ol std -t 1 $*_map.ncd $*.ncd $*.pcf

%.twr: %_map.ncd %.pcf %.ncd $(UCF)
	@echo 'Makefile: Creating $@'
	$(XILINX); trce $(INTSTYLE) -e 3 -l 3 -xml $*.twx $*.ncd -o $*.twr $*.pcf -ucf $(UCF)

%.bit %.msk: %.ncd $(BITGEN_OPTION_FILE)
	@echo 'Makefile: Creating $@'
	$(XILINX); bitgen $(INTSTYLE) -m -f $(BITGEN_OPTION_FILE) $*.ncd

###
#
# flashing/programming
#
###
%_fpga: %.bit %.msk impact_%_fpga.cmd
	@echo 'Makefile: Programming FPGA with $@'
	$(XILINX); impact -batch impact_$*_fpga.cmd

%_prom: %.bit  impact_%_prom.cmd
	@echo 'Makefile: Programming PROM with $@'
	$(XILINX); impact -batch impact_$*_prom.cmd

###
#
# testbenches using xilinx isim
#
###
%_test.bin: $(ALL_VHD) %_test.prj
	@echo 'Makefile: Creating Testbenchbinary $@'
	$(XILINX); fuse -incremental -rangecheck -prj $*_test.prj -top $*_test -o $*_test.bin

%_test.vcd: %_test.bin
	@echo 'Makefile: Creating ValueCangeDump $@'
	$(XILINX); ./$< -tclbatch $(ISIM_BATCH);
	mv isimdumpdata.vcd $@

%_wave: %_test.vcd
	@echo 'Makefile: Executing gtkwave with $@'
	$(WAVEFORMVIEWER) $< -a $*_test.sav

###
#
# ghdl-support... doesn't work...
#
###
GHDL_WORKDIR = ./ghdl_workdir
UNISIMDIR = ./unisim
CORELIBDIR = ./corelib
CONFIGDIR = ./config
GHDL_OPTIONS =  --workdir=$(GHDL_WORKDIR) --ieee=synopsys 

#klappt auch nicht mit xilinx-code weil die library "secureip" nicht mit mitgelifert wird...
#und der spaceclimbercode schmeisst haufenweise fehler...
motCon_ctrl_syntax: $(ALL_VHD)
	rm -rf  config_lib ghdl_workdir
	mkdir -p config_lib ghdl_workdir
	ghdl -i --work=config --workdir=config_lib -fexplicit --std=93c --ieee=synopsys config.vhd
	ghdl -i -Pconfig_lib --workdir=ghdl_workdir -fexplicit --std=93c --ieee=synopsys  $(LOCAL_VHD) $(LIB_VHD) 
	ghdl -s -Pconfig_lib --workdir=ghdl_workdir -fexplicit --std=93c --ieee=synopsys  $(LOCAL_VHD) $(LIB_VHD) 
	rm -rf  config_lib ghdl_workdir
	

%_test.ghdl: $(ALL_VHD)
	rm -rf $(GHDL_WORKDIR) $(UNISIMDIR) $(CORELIBDIR)
	mkdir -p $(GHDL_WORKDIR)
	mkdir -p $(UNISIMDIR)
	mkdir -p $(CORELIBDIR)
	ghdl -i --work=unisim --workdir=$(UNISIMDIR) --std=93c -fexplicit --ieee=synopsys /opt/xilinx/10.1/ISE/vhdl/src/unisims/*.vhd 
	ghdl -i --work=xilinxcorelib --workdir=$(CORELIBDIR) --std=93c -fexplicit --ieee=synopsys /opt/xilinx/10.1/ISE/vhdl/src/XilinxCoreLib/*.vhd
	ghdl -i --work=work $(GHDL_OPTIONS) $(ALL_VHD)
	ghdl -m -P$(UNISIMDIR) -P$(CORELIBDIR) --workdir=$(GHDL_WORKDIR) --std=93c -fexplicit --ieee=synopsys $(ALL_VHD)
	ghdl -r -P$(UNISIMDIR) -P$(CORELIBDIR) --workdir=$(GHDL_WORKDIR) --std=93c -fexplicit --ieee=synopsys $*



.PRECIOUS: %_test.bin %.bit %_test.vcd %.vhd

##
#
# "plumbing layer" -- cleaning up of unwanted temporaray files
# Not perfectly efficient, but seems to delete everything unwanted, not not too much... 
# but consider using an RCS, just to be sure...
#
##

# every file which may be created during build-process and has $(PROJECT) as a prefix
ISE_ENDINGS = .bgn .bit .bld .drc .ncd .ngd .ngr .pad .par .pcf .ptwx .twr .unroutes .xpi _map.map _map.mrp _map.ncd _map.ngm _pad.csv .cmd_log _guide.ncd .lso _map.xrpt .ngc _ngdbuild.xrpt .ntrc_log _pad.txt _par.xrpt _prev_built.ngd .prj .restore .stx _summary.html .syr .twx _xst.xrpt _timesim.nlf _timesim.vhd .msk .svf .restore .mcs .prm .sig

ISE_STATISTICS = _summary.xml _usage.xml _summary.html device_usage_statistics.html

# every file which may be created during build-process
CRAP = device_usage_statistics.html _impactbatch.log xlnx_auto_0.ise
# every dir which may be created during build-process
ISE_DIRS = simu xst _ngo xlnx_auto_0_xdb tmp

# shit generated by coregen, may be found in all library subdirectories...
CORE_ENDINGS = _flist.txt *.ngc_xst.xrpt .ngc _readme.txt .vho .vhd _xmdf.tcl filt_decode_rom.mif COEFF_auto0* _fir_compiler_v4_0_xst_1* .v .veo .asy .sym .mif
CORE_STUFF = xlnx_auto_0_xdb tmp xlnx_auto_0.ise core_resources.txt coregen.log

clean: statclean isimclean iseclean coreclean dirclean dokuclean
	@echo 'Makefile: Doing $@'

statclean:
	@echo 'Makefile: Doing $@'
	@for stat in $(ISE_STATISTICS); do \
		rm -rf *$$stat ; \
	done

isimclean:
	@echo 'Makefile: Doing $@'
	rm -rf isim
	rm -f isimwavedata.xwv
	rm -f isim.log
	rm -f isim.cmd
	#rm -f *.sav # gtkwave saves current view to it... has to be manually deleted when vector dimensions change!
	rm -f *_test.bin
	rm -f *_test.vcd

dirclean:
	@echo 'Makefile: Doing $@'
	@for dir in $(ISE_DIRS); do \
		rm -rf $$dir ; \
	done

iseclean:
	@echo 'Makefile: Doing $@'
	@for crap in $(ISE_ENDINGS); do \
		rm -f *$$crap ; \
	done
	rm -f fuse.log
	rm -f xlnx_auto_0.ise
	rm -f _impactbatch.log

coreclean:
	@if [ -n "$(LOCAL_XCO)" ]; then \
		echo 'Makefile: Doing $@ for local IP-Cores'; \
		for core in $(subst .xco,,$(LOCAL_XCO)); do \
			for ending in $(CORE_ENDINGS); do \
				rm -f $$core$$ending; \
			done; \
			for stuff in $(CORE_STUFF); do \
				rm -rf `dirname $$core`/$$stuff; \
			done; \
		done; \
	fi
	@if [ -n "$(LIB_XCO)" ];then \
		echo 'Makefile: Doing $@ for library IP-Cores (deteling in library dirs!!!)'; \
		for core in $(subst .xco,,$(LIB_XCO)); do \
			for ending in $(CORE_ENDINGS); do \
				rm -f $$core$$ending ; \
			done; \
			for stuff in $(CORE_STUFF); do \
				rm -rf `dirname $$core`/$$stuff; \
			done; \
		done; \
	fi


dokuclean:
	rm -rf doxygen
	rm -f DoxyFile

